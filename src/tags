!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARRAY_SIZE	http_parser.c	41;"	d	file:
BAIDU_PAN_BLOCK	http_netdisk.c	12;"	d	file:
BIT_AT	http_parser.c	45;"	d	file:
BLOCKED	srv_echo.c	48;"	d	file:
BUFSIZE	srv_echo.c	42;"	d	file:
CALLBACK_DATA	http_parser.c	118;"	d	file:
CALLBACK_DATA_	http_parser.c	98;"	d	file:
CALLBACK_DATA_NOADVANCE	http_parser.c	122;"	d	file:
CALLBACK_NOTIFY	http_parser.c	92;"	d	file:
CALLBACK_NOTIFY_	http_parser.c	81;"	d	file:
CALLBACK_NOTIFY_NOADVANCE	http_parser.c	95;"	d	file:
CHARSET_MAX	ftp_extract.c	65;"	d	file:
CHUNKED	http_parser.c	139;"	d	file:
CLOSE	http_parser.c	141;"	d	file:
CONNECTION	http_parser.c	135;"	d	file:
CONTENT_LENGTH	http_parser.c	136;"	d	file:
CR	http_parser.c	374;"	d	file:
Char2Num	parsertrace.c	/^char Char2Num(char ch)$/;"	f	signature:(char ch)
ELEM_AT	http_parser.c	51;"	d	file:
ETH_ALEN	pfutils.c	45;"	d	file:
FREE	http_IM_parser.c	74;"	d	file:
FREE	http_fei_xin.c	24;"	d	file:
FREE	http_netdisk.c	15;"	d	file:
GBK2UTF8	ftp_extract.c	/^GBK2UTF8 (char *pInBuf, int iInLen, char *pOutBuf, int iOutLen, char *charset)$/;"	f	signature:(char *pInBuf, int iInLen, char *pOutBuf, int iOutLen, char *charset)
HTTP_STRERROR_GEN	http_parser.c	420;"	d	file:
HTTP_STRERROR_GEN	http_parser.c	427;"	d	file:
IMCACHE_CHECK_MAGIC	imembase.c	1097;"	d	file:
IMCACHE_CHECK_MAGIC	imembase.c	1454;"	d	file:
IMCACHE_FLAG_NODRAIN	imembase.c	978;"	d	file:
IMCACHE_FLAG_NOLOCK	imembase.c	979;"	d	file:
IMCACHE_FLAG_OFFSLAB	imembase.c	977;"	d	file:
IMCACHE_FLAG_ONQUEUE	imembase.c	981;"	d	file:
IMCACHE_FLAG_SYSTEM	imembase.c	980;"	d	file:
IMCACHE_NODRAIN	imembase.c	984;"	d	file:
IMCACHE_NOLOCK	imembase.c	985;"	d	file:
IMCACHE_OFFSLAB	imembase.c	983;"	d	file:
IMCACHE_ONQUEUE	imembase.c	987;"	d	file:
IMCACHE_SYSTEM	imembase.c	986;"	d	file:
IMEMSLAB_NEXT	imembase.c	36;"	d	file:
IMUTEX_DESTROY	imembase.c	560;"	d	file:
IMUTEX_DESTROY	imembase.c	569;"	d	file:
IMUTEX_INIT	imembase.c	559;"	d	file:
IMUTEX_INIT	imembase.c	568;"	d	file:
IMUTEX_LOCK	imembase.c	561;"	d	file:
IMUTEX_LOCK	imembase.c	570;"	d	file:
IMUTEX_TYPE	imembase.c	558;"	d	file:
IMUTEX_TYPE	imembase.c	567;"	d	file:
IMUTEX_UNLOCK	imembase.c	562;"	d	file:
IMUTEX_UNLOCK	imembase.c	571;"	d	file:
IM_Match_Pcre	http_IM_parser.c	/^char ** IM_Match_Pcre(unsigned char *src, const char *pattern, unsigned int n)$/;"	f	signature:(unsigned char *src, const char *pattern, unsigned int n)
IM_get_file_size	http_IM_parser.c	/^unsigned long IM_get_file_size(const char *path)  $/;"	f	signature:(const char *path)
IM_memcmp_match_NodeList	read_IM_config.c	/^_IM_HOST_URL_REG 		*IM_memcmp_match_NodeList;$/;"	v
IM_memcmp_match_head_Node	read_IM_config.c	/^_IM_HOST_URL_REG 		*IM_memcmp_match_head_Node;$/;"	v
IM_memcpy	read_IM_config.c	/^int IM_memcpy(char **p1, const char *p2)$/;"	f	signature:(char **p1, const char *p2)
IM_pcre_match_NodeList	read_IM_config.c	/^_IM_HOST_URL_REG		*IM_pcre_match_NodeList;$/;"	v
IM_pcre_match_head_Node	read_IM_config.c	/^_IM_HOST_URL_REG		*IM_pcre_match_head_Node;$/;"	v
IS_ALPHA	http_parser.c	377;"	d	file:
IS_ALPHANUM	http_parser.c	379;"	d	file:
IS_FX	http_IM_parser.c	/^const char		*IS_FX = "CloudFile";\/\/飞信离线文件传输， User Agent$/;"	v
IS_HEX	http_parser.c	380;"	d	file:
IS_HOST_CHAR	http_parser.c	391;"	d	file:
IS_HOST_CHAR	http_parser.c	396;"	d	file:
IS_MAIL	srv_echo.c	75;"	d	file:
IS_MARK	http_parser.c	381;"	d	file:
IS_NUM	http_parser.c	378;"	d	file:
IS_QQ	http_IM_parser.c	/^const char		*IS_QQ = "QQClient";\/\/QQ离线文件传输，User Agent$/;"	v
IS_QQ_1	http_IM_parser.c	/^const char		*IS_QQ_1 = "Mozilla\/4.0 (compatible; MSIE 6.0; Windows NT 5.1)";\/\/QQ5.4版本User Agent$/;"	v
IS_QQ_2014_GOS	http_IM_parser.c	/^const char		*IS_QQ_2014_GOS = "TXFTNActiveX_RawSocket";\/\/QQ2014 群共享文件文件传输，User Agent$/;"	v
IS_URL_CHAR	http_parser.c	390;"	d	file:
IS_URL_CHAR	http_parser.c	394;"	d	file:
IS_USERINFO_CHAR	http_parser.c	384;"	d	file:
IS_WY_host	http_IM_parser.c	/^const char		*IS_WY_host = "tj.yunup.ftn.qq.com";\/\/QQ微云网盘$/;"	v
IS_YM_url	http_IM_parser.c	/^const char		*IS_YM_url = "^\/relay\\\\?token=.+&sender=.+&recver=.+";\/\/正则表达式$/;"	v
KEEP_ALIVE	http_parser.c	140;"	d	file:
LF	http_parser.c	375;"	d	file:
LOWER	http_parser.c	376;"	d	file:
MAIL_HAS_ATT	srv_echo.c	76;"	d	file:
MAIL_HAS_MIME_ATT	srv_echo.c	77;"	d	file:
MARK	http_parser.c	126;"	d	file:
MAX_BOUNDARY_SIZE	srv_echo.c	64;"	d	file:
MAX_CONTENT_TYPE	srv_echo.c	63;"	d	file:
MAX_IP_SIZE	srv_echo.c	65;"	d	file:
MAX_METHOD_SIZE	srv_echo.c	62;"	d	file:
MAX_TEXT	srv_echo.c	43;"	d	file:
MAX_URL_SIZE	srv_echo.c	61;"	d	file:
MIN	http_parser.c	37;"	d	file:
MSEC_IN_DAY	pfutils.c	194;"	d	file:
MSEC_IN_HOUR	pfutils.c	195;"	d	file:
MSEC_IN_MINUTE	pfutils.c	196;"	d	file:
MSEC_IN_SEC	pfutils.c	197;"	d	file:
MSG_FILE	srv_echo.c	38;"	d	file:
NEW_MESSAGE	http_parser.c	412;"	d	file:
NEW_MESSAGE	http_parser.c	415;"	d	file:
NON_NUM	parsertrace.c	43;"	d	file:
NOT_BLOCKED	srv_echo.c	47;"	d	file:
NOT_MAIL	srv_echo.c	74;"	d	file:
OVECCOUNT	srv_echo.c	69;"	d	file:
PARSING_HEADER	http_parser.c	330;"	d	file:
PATTERN_LENGTH	srv_echo.c	68;"	d	file:
PERM	srv_echo.c	39;"	d	file:
PROXY_CONNECTION	http_parser.c	134;"	d	file:
QQ_6_3_HEADER	http_IM_parser.c	53;"	d	file:
QQ_6_3_MAX_BLOCK	http_IM_parser.c	51;"	d	file:
QQ_6_3_MIN_BLOCK	http_IM_parser.c	49;"	d	file:
QQ_6_6_MAX_BLOCK	http_IM_parser.c	55;"	d	file:
QQ_fn	http_IM_parser.c	/^const char      *QQ_fn = "QQ_File_Have_No_Name";$/;"	v
QQattach	webmail_parser.c	/^int QQattach(HttpSession* dlp_http,webmail_string_and_len *StoPT,webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(HttpSession* dlp_http,webmail_string_and_len *StoPT,webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
QQattach2	webmail_parser.c	/^int QQattach2(HttpSession* dlp_http, webmail_string_and_len *StoPT, webmail_string_and_len *StoMB, dlp_webmail_info *webmail)$/;"	f	signature:(HttpSession* dlp_http, webmail_string_and_len *StoPT, webmail_string_and_len *StoMB, dlp_webmail_info *webmail)
QQattachF	webmail_parser.c	/^int QQattachF(HttpSession* dlp_http,webmail_string_and_len *StoCK,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(HttpSession* dlp_http,webmail_string_and_len *StoCK,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
QQmail	webmail_parser.c	/^int QQmail(webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
QQmail_qun	webmail_parser.c	/^int QQmail_qun(webmail_string_and_len *StoCK,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoCK,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
SET_ERRNO	http_parser.c	60;"	d	file:
SMALL_BUFF	srv_echo.c	66;"	d	file:
STRICT_CHECK	http_parser.c	405;"	d	file:
STRICT_CHECK	http_parser.c	414;"	d	file:
T	http_parser.c	207;"	d	file:
T	http_parser.c	209;"	d	file:
T	http_parser.c	247;"	d	file:
TANG_LOG	extractmain.c	65;"	d	file:
TOKEN	http_parser.c	389;"	d	file:
TOKEN	http_parser.c	393;"	d	file:
TRACE_ERROR	pfutils.c	39;"	d	file:
TRACE_INFO	pfutils.c	42;"	d	file:
TRACE_NORMAL	pfutils.c	41;"	d	file:
TRACE_WARNING	pfutils.c	40;"	d	file:
TRANSFER_ENCODING	http_parser.c	137;"	d	file:
ULLONG_MAX	http_parser.c	33;"	d	file:
UPGRADE	http_parser.c	138;"	d	file:
UPLOADTEST	srv_echo.c	72;"	d	file:
UPLOAD_TEST	srv_echo.c	78;"	d	file:
URLDecode	parsertrace.c	/^int URLDecode(const char* str, const int strSize, char* result, const int resultSize) {   $/;"	f	signature:(const char* str, const int strSize, char* result, const int resultSize)
WLTOCAP_KEY	srv_echo.c	44;"	d	file:
WRITE_BLOCKED	srv_echo.c	46;"	d	file:
WYMAIL_MY	srv_echo.c	71;"	d	file:
XX	http_parser.c	146;"	d	file:
XX	http_parser.c	148;"	d	file:
__USE_GNU	pfutils.c	28;"	d	file:
__anon2::description	http_parser.c	/^  const char *description;$/;"	m	struct:__anon2	file:	access:public
__anon2::name	http_parser.c	/^  const char *name;$/;"	m	struct:__anon2	file:	access:public
add_IM_list	read_IM_config.c	/^int add_IM_list(_IM_HOST_URL_REG *nodelist, const char *host, const char * url, const char *reg)$/;"	f	signature:(_IM_HOST_URL_REG *nodelist, const char *host, const char * url, const char *reg)
add_att_nodelist	webmail_attach.c	/^int add_att_nodelist (struct att_node *nodelist,  int attlen,char *RawAttName,char *att_uuid)$/;"	f	signature:(struct att_node *nodelist, int attlen,char *RawAttName,char *att_uuid)
add_name_nodelist	gmime_smtp.c	/^int add_name_nodelist (struct namenode* nodelistsrc, const char *filename, const char *uuidname, const char *filepath, unsigned char contentflag)$/;"	f	signature:(struct namenode* nodelistsrc, const char *filename, const char *uuidname, const char *filepath, unsigned char contentflag)
add_rcpt_to	smtpfunc.c	/^int add_rcpt_to (SmtpSession_t *p_session, char *packstr, unsigned int packlen)$/;"	f	signature:(SmtpSession_t *p_session, char *packstr, unsigned int packlen)
att	srv_echo.c	/^    }att;$/;"	m	struct:echo_req_data	typeref:enum:echo_req_data::__anon1	file:	access:public
attach2_139	webmail_parser.c	/^int attach2_139(HttpSession* dlp_http, webmail_string_and_len *StoPT, webmail_string_and_len *StoMB, webmail_string_and_len *StoBY,dlp_webmail_info *webmail)$/;"	f	signature:(HttpSession* dlp_http, webmail_string_and_len *StoPT, webmail_string_and_len *StoMB, webmail_string_and_len *StoBY,dlp_webmail_info *webmail)
attach3_139	webmail_parser.c	/^int attach3_139(HttpSession* dlp_http,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(HttpSession* dlp_http,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
attach_139	webmail_parser.c	/^int attach_139(webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
attach_189	webmail_parser.c	/^int attach_189(webmail_string_and_len *StoPT,webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoPT,webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
bind2core	pfutils.c	/^int bind2core(u_int core_id)$/;"	f	signature:(u_int core_id)
bindthread2core	pfutils.c	/^int bindthread2core(pthread_t thread_id, u_int core_id)$/;"	f	signature:(pthread_t thread_id, u_int core_id)
blocked	srv_echo.c	/^    int blocked;$/;"	m	struct:echo_req_data	file:	access:public
blocked_footer_message	srv_echo.c	/^static const char *blocked_footer_message =$/;"	v	file:
blocked_header_message	srv_echo.c	/^static const char *blocked_header_message =$/;"	v	file:
blog	http_IM_parser.c	/^int blog(HttpSession *dlp_http, char **http_IM_json, char *pattern,http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)$/;"	f	signature:(HttpSession *dlp_http, char **http_IM_json, char *pattern,http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)
body	srv_echo.c	/^    ci_simple_file_t *body;$/;"	m	struct:echo_req_data	file:	access:public
boundary	srv_echo.c	/^    char *boundary;$/;"	m	struct:http_info	file:	access:public
boundary_len	srv_echo.c	/^int boundary_len = -1;$/;"	v
build_JVM	fileparse.c	/^void build_JVM()$/;"	f
c_free	webmail_parser.c	/^    void c_free(char**obj)$/;"	f	signature:(char**obj)
c_malloc	webmail_parser.c	/^    int c_malloc(void **obj,int len)$/;"	f	signature:(void **obj,int len)
chardet_create	ftp_extract.c	/^  extern CHARDET_IMEXPORT int chardet_create (chardet_t * pdet);$/;"	p	file:	signature:(chardet_t * pdet)
chardet_data_end	ftp_extract.c	/^  extern CHARDET_IMEXPORT int chardet_data_end (chardet_t det);$/;"	p	file:	signature:(chardet_t det)
chardet_get_charset	ftp_extract.c	/^  extern CHARDET_IMXPORT int chardet_get_charset (chardet_t det,$/;"	p	file:	signature:(chardet_t det, char *namebuf, unsigned int buflen)
chardet_handle_data	ftp_extract.c	/^  extern CHARDET_IMEXPORT int chardet_handle_data (chardet_t det,$/;"	p	file:	signature:(chardet_t det, const char *data, unsigned int len)
chardet_reset	ftp_extract.c	/^  extern int chardet_reset (chardet_t det);$/;"	p	file:	signature:(chardet_t det)
charsetConvert	ftp_extract.c	/^charsetConvert (const char *from_charset, const char *to_charset,$/;"	f	signature:(const char *from_charset, const char *to_charset, const char *src, const int srclen, char *save, int savelen)
check	pfutils.c	/^	u_int16_t check;$/;"	m	struct:compact_ip_hdr	file:	access:public
check_for_first_free_ring_buffer	session_buf.c	/^int check_for_first_free_ring_buffer()$/;"	f
check_for_first_free_sring_buffer	session_buf.c	/^int check_for_first_free_sring_buffer()$/;"	f
clientip	srv_echo.c	/^    char *clientip;$/;"	m	struct:http_info	file:	access:public
cn_attach	webmail_parser.c	/^int cn_attach(webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
cn_mail	webmail_parser.c	/^int cn_mail(webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
cnpc_attach	webmail_parser.c	/^int cnpc_attach(webmail_string_and_len *StoPT,webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoPT,webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
cnpc_mail	webmail_parser.c	/^int cnpc_mail(webmail_string_and_len *StoPT,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoPT,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
cntv_attach	webmail_parser.c	/^int cntv_attach(webmail_string_and_len *StoCK,webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoCK,webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
cntv_mail	webmail_parser.c	/^int cntv_mail(webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
code_convert	ftp_extract.c	/^code_convert (char *from_charset, char *to_charset, char *inbuf, size_t inlen,$/;"	f	signature:(char *from_charset, char *to_charset, char *inbuf, size_t inlen, char *outbuf, size_t outlen)
compact_eth_hdr	pfutils.c	/^struct compact_eth_hdr {$/;"	s	file:
compact_eth_hdr::h_dest	pfutils.c	/^	unsigned char h_dest[ETH_ALEN];$/;"	m	struct:compact_eth_hdr	file:	access:public
compact_eth_hdr::h_proto	pfutils.c	/^	u_int16_t h_proto;$/;"	m	struct:compact_eth_hdr	file:	access:public
compact_eth_hdr::h_source	pfutils.c	/^	unsigned char h_source[ETH_ALEN];$/;"	m	struct:compact_eth_hdr	file:	access:public
compact_ip_hdr	pfutils.c	/^struct compact_ip_hdr {$/;"	s	file:
compact_ip_hdr::check	pfutils.c	/^	u_int16_t check;$/;"	m	struct:compact_ip_hdr	file:	access:public
compact_ip_hdr::daddr	pfutils.c	/^	u_int32_t daddr;$/;"	m	struct:compact_ip_hdr	file:	access:public
compact_ip_hdr::frag_off	pfutils.c	/^	u_int16_t frag_off;$/;"	m	struct:compact_ip_hdr	file:	access:public
compact_ip_hdr::id	pfutils.c	/^	u_int16_t id;$/;"	m	struct:compact_ip_hdr	file:	access:public
compact_ip_hdr::ihl	pfutils.c	/^	u_int8_t ihl:4, version:4;$/;"	m	struct:compact_ip_hdr	file:	access:public
compact_ip_hdr::protocol	pfutils.c	/^	u_int8_t protocol;$/;"	m	struct:compact_ip_hdr	file:	access:public
compact_ip_hdr::saddr	pfutils.c	/^	u_int32_t saddr;$/;"	m	struct:compact_ip_hdr	file:	access:public
compact_ip_hdr::tos	pfutils.c	/^	u_int8_t tos;$/;"	m	struct:compact_ip_hdr	file:	access:public
compact_ip_hdr::tot_len	pfutils.c	/^	u_int16_t tot_len;$/;"	m	struct:compact_ip_hdr	file:	access:public
compact_ip_hdr::ttl	pfutils.c	/^	u_int8_t ttl;$/;"	m	struct:compact_ip_hdr	file:	access:public
compact_ip_hdr::version	pfutils.c	/^	u_int8_t ihl:4, version:4;$/;"	m	struct:compact_ip_hdr	file:	access:public
compact_ipv6_hdr	pfutils.c	/^struct compact_ipv6_hdr {$/;"	s	file:
compact_ipv6_hdr::flow_lbl	pfutils.c	/^	u_int8_t flow_lbl[3];$/;"	m	struct:compact_ipv6_hdr	file:	access:public
compact_ipv6_hdr::hop_limit	pfutils.c	/^	u_int8_t hop_limit;$/;"	m	struct:compact_ipv6_hdr	file:	access:public
compact_ipv6_hdr::nexthdr	pfutils.c	/^	u_int8_t nexthdr;$/;"	m	struct:compact_ipv6_hdr	file:	access:public
compact_ipv6_hdr::payload_len	pfutils.c	/^	u_int16_t payload_len;$/;"	m	struct:compact_ipv6_hdr	file:	access:public
compact_ipv6_hdr::priority	pfutils.c	/^	u_int8_t priority:4, version:4;$/;"	m	struct:compact_ipv6_hdr	file:	access:public
compact_ipv6_hdr::version	pfutils.c	/^	u_int8_t priority:4, version:4;$/;"	m	struct:compact_ipv6_hdr	file:	access:public
content	srv_echo.c	/^    char *content;$/;"	m	struct:mail_my	file:	access:public
content_length	srv_echo.c	/^    int content_length;$/;"	m	struct:http_info	file:	access:public
content_type	srv_echo.c	/^    char *content_type;$/;"	m	struct:http_info	file:	access:public
create_hash	beap_hash.c	/^hash_table * create_hash(int size, \\$/;"	f	signature:(int size, \ t_hash_func hash_func, \ t_comp_func comp_func)
create_pid_file	pfutils.c	/^void create_pid_file(char *pidFile)$/;"	f	signature:(char *pidFile)
create_ring_buffer	session_buf.c	/^int  create_ring_buffer(int iringbuffer_ID, int iringbuffer_qlength)$/;"	f	signature:(int iringbuffer_ID, int iringbuffer_qlength)
create_sring_buffer	session_buf.c	/^int  create_sring_buffer(int iringbuffer_ID, int iringbuffer_qlength)$/;"	f	signature:(int iringbuffer_ID, int iringbuffer_qlength)
daddr	pfutils.c	/^	u_int32_t daddr;$/;"	m	struct:compact_ip_hdr	file:	access:public
daemonize	pfutils.c	/^void daemonize()$/;"	f
delete_hash	beap_hash.c	/^void delete_hash(hash_table *tbl)$/;"	f	signature:(hash_table *tbl)
delete_hash_keep_content	beap_hash.c	/^void delete_hash_keep_content(hash_table *tbl)$/;"	f	signature:(hash_table *tbl)
delta_time	pfutils.c	/^double delta_time(struct timeval *now, struct timeval *before)$/;"	f	signature:(struct timeval *now, struct timeval *before)
description	http_parser.c	/^  const char *description;$/;"	m	struct:__anon2	file:	access:public
destory_JVM	fileparse.c	/^void destory_JVM()$/;"	f
detect	ftp_extract.c	/^detect (char *buffer, int len)$/;"	f	signature:(char *buffer, int len)
dispose_STARTTLS_cmd	smtp_dissect.c	/^int dispose_STARTTLS_cmd (SmtpSession_t	*p_sessionsrc, char *packstr, unsigned int packlen)$/;"	f	signature:(SmtpSession_t *p_sessionsrc, char *packstr, unsigned int packlen)
dispose_smtp_cmd	smtp_dissect.c	/^int dispose_smtp_cmd (SmtpSession_t	*p_sessionsrc, char *packstr, unsigned int packlen)$/;"	f	signature:(SmtpSession_t *p_sessionsrc, char *packstr, unsigned int packlen)
dispose_smtp_mail_body_bdat	smtp_dissect.c	/^int dispose_smtp_mail_body_bdat (SmtpSession_t *p_sessionsrc, char *packstr, unsigned int packlen, smtp_sbuffputdata sbuff_putdata, int sbuffer_id)$/;"	f	signature:(SmtpSession_t *p_sessionsrc, char *packstr, unsigned int packlen, smtp_sbuffputdata sbuff_putdata, int sbuffer_id)
dispose_smtp_mail_body_data	smtp_dissect.c	/^int dispose_smtp_mail_body_data (SmtpSession_t *p_sessionsrc, char *packstr, unsigned int packlen, smtp_sbuffputdata sbuff_putdata, int sbuffer_id)$/;"	f	signature:(SmtpSession_t *p_sessionsrc, char *packstr, unsigned int packlen, smtp_sbuffputdata sbuff_putdata, int sbuffer_id)
dispose_smtp_response	smtp_dissect.c	/^int dispose_smtp_response (SmtpSession_t *p_sessionsrc, char *packstr, unsigned int packlen)$/;"	f	signature:(SmtpSession_t *p_sessionsrc, char *packstr, unsigned int packlen)
do_http_file	parsertrace.c	/^int do_http_file(const char *packet_content, int len, struct tuple4 *key, http_sbuffputdata http_sbuff_putdata,const int iringbuffer_ID)$/;"	f	signature:(const char *packet_content, int len, struct tuple4 *key, http_sbuffputdata http_sbuff_putdata,const int iringbuffer_ID)
drop_privileges	pfutils.c	/^void drop_privileges(char *username)$/;"	f	signature:(char *username)
echo_check_preview_handler	srv_echo.c	/^int echo_check_preview_handler(char *preview_data, int preview_data_len,$/;"	f	signature:(char *preview_data, int preview_data_len, ci_request_t * req)
echo_check_preview_handler	srv_echo.c	/^int echo_check_preview_handler(char *preview_data, int preview_data_len,$/;"	p	file:	signature:(char *preview_data, int preview_data_len, ci_request_t *)
echo_close_service	srv_echo.c	/^void echo_close_service() $/;"	f
echo_close_service	srv_echo.c	/^void echo_close_service();$/;"	p	file:
echo_end_of_data_handler	srv_echo.c	/^int echo_end_of_data_handler(ci_request_t * req)$/;"	f	signature:(ci_request_t * req)
echo_end_of_data_handler	srv_echo.c	/^int echo_end_of_data_handler(ci_request_t * req);$/;"	p	file:	signature:(ci_request_t * req)
echo_init_request_data	srv_echo.c	/^void *echo_init_request_data(ci_request_t * req)$/;"	f	signature:(ci_request_t * req)
echo_init_request_data	srv_echo.c	/^void *echo_init_request_data(ci_request_t * req);$/;"	p	file:	signature:(ci_request_t * req)
echo_init_service	srv_echo.c	/^int echo_init_service(ci_service_xdata_t * srv_xdata,$/;"	f	signature:(ci_service_xdata_t * srv_xdata, struct ci_server_conf *server_conf)
echo_init_service	srv_echo.c	/^int echo_init_service(ci_service_xdata_t * srv_xdata,$/;"	p	file:	signature:(ci_service_xdata_t * srv_xdata, struct ci_server_conf *server_conf)
echo_io	srv_echo.c	/^int echo_io(char *wbuf, int *wlen, char *rbuf, int *rlen, int iseof,$/;"	f	signature:(char *wbuf, int *wlen, char *rbuf, int *rlen, int iseof, ci_request_t * req)
echo_io	srv_echo.c	/^int echo_io(char *wbuf, int *wlen, char *rbuf, int *rlen, int iseof,ci_request_t * req);$/;"	p	file:	signature:(char *wbuf, int *wlen, char *rbuf, int *rlen, int iseof,ci_request_t * req)
echo_read_from_net	srv_echo.c	/^int echo_read_from_net(char *buf, int len, int iseof, ci_request_t * req)$/;"	f	signature:(char *buf, int len, int iseof, ci_request_t * req)
echo_release_request_data	srv_echo.c	/^void echo_release_request_data(void *data)$/;"	f	signature:(void *data)
echo_release_request_data	srv_echo.c	/^void echo_release_request_data(void *data);$/;"	p	file:	signature:(void *data)
echo_req_data	srv_echo.c	/^struct echo_req_data {$/;"	s	file:
echo_req_data::att	srv_echo.c	/^    }att;$/;"	m	struct:echo_req_data	typeref:enum:echo_req_data::__anon1	file:	access:public
echo_req_data::blocked	srv_echo.c	/^    int blocked;$/;"	m	struct:echo_req_data	file:	access:public
echo_req_data::body	srv_echo.c	/^    ci_simple_file_t *body;$/;"	m	struct:echo_req_data	file:	access:public
echo_req_data::eof	srv_echo.c	/^    int eof;$/;"	m	struct:echo_req_data	file:	access:public
echo_req_data::error_page	srv_echo.c	/^    ci_membuf_t *error_page;$/;"	m	struct:echo_req_data	file:	access:public
echo_req_data::httpinf	srv_echo.c	/^    http_info *httpinf;$/;"	m	struct:echo_req_data	file:	access:public
echo_req_data::is_mail	srv_echo.c	/^    int is_mail;$/;"	m	struct:echo_req_data	file:	access:public
echo_req_data::mime_att	srv_echo.c	/^        mime_att,$/;"	e	enum:echo_req_data::__anon1	file:
echo_req_data::no_att	srv_echo.c	/^        no_att,$/;"	e	enum:echo_req_data::__anon1	file:
echo_req_data::normal_att	srv_echo.c	/^        normal_att,$/;"	e	enum:echo_req_data::__anon1	file:
echo_req_data::req	srv_echo.c	/^    ci_request_t *req;$/;"	m	struct:echo_req_data	file:	access:public
echo_req_data::upload_test	srv_echo.c	/^        upload_test,$/;"	e	enum:echo_req_data::__anon1	file:
echo_write_to_net	srv_echo.c	/^int echo_write_to_net(char *buf, int len, ci_request_t * req)$/;"	f	signature:(char *buf, int len, ci_request_t * req)
encode_guess	ftp_extract.c	/^encode_guess (char *s, int len, char *in_str, int str_len, char *out_str,$/;"	f	signature:(char *s, int len, char *in_str, int str_len, char *out_str, int out_str_len)
eof	srv_echo.c	/^    int eof;$/;"	m	struct:echo_req_data	file:	access:public
error_page	srv_echo.c	/^    ci_membuf_t *error_page;$/;"	m	struct:echo_req_data	file:	access:public
extract_http_info	srv_echo.c	/^int extract_http_info(ci_request_t * req, ci_headers_list_t * req_header,$/;"	f	signature:(ci_request_t * req, ci_headers_list_t * req_header, struct http_info *httpinf)
extract_http_info	srv_echo.c	/^int extract_http_info(ci_request_t *, ci_headers_list_t *, struct http_info *);$/;"	p	file:	signature:(ci_request_t *, ci_headers_list_t *, struct http_info *)
feition_5_5_38_host	http_IM_parser.c	/^const char		*feition_5_5_38_host = "caiyun.feixin.10086.cn";$/;"	v
feition_5_5_38_url	http_IM_parser.c	/^const char 		*feition_5_5_38_url = "\/storageWeb\/servlet\/uploadFileServlet\\\\?uploadCode=.*&txType=.*&oprChannel=.*&dom=.*";$/;"	v
file_extract_pthread	extractmain.c	/^int file_extract_pthread (char *jsonstr, char *strpath, unsigned long max_filesize)$/;"	f	signature:(char *jsonstr, char *strpath, unsigned long max_filesize)
file_msg	srv_echo.c	/^struct file_msg$/;"	s	file:
file_msg::msg	srv_echo.c	/^    char msg[BUFSIZE];$/;"	m	struct:file_msg	file:	access:public
file_msg::mtype	srv_echo.c	/^    long int mtype;$/;"	m	struct:file_msg	file:	access:public
find_hash	beap_hash.c	/^hash_bucket * find_hash(hash_table * tbl, void * pos, int len)$/;"	f	signature:(hash_table * tbl, void * pos, int len)
flow_lbl	pfutils.c	/^	u_int8_t flow_lbl[3];$/;"	m	struct:compact_ipv6_hdr	file:	access:public
frag_off	pfutils.c	/^	u_int16_t frag_off;$/;"	m	struct:compact_ip_hdr	file:	access:public
free_accessory	smtpfunc.c	/^int free_accessory(smtp_accessory_t *smtp_accessory)$/;"	f	signature:(smtp_accessory_t *smtp_accessory)
free_att_nodelist	webmail_attach.c	/^int free_att_nodelist (struct att_node *nodelist)$/;"	f	signature:(struct att_node *nodelist)
free_mail_body	smtpfunc.c	/^int free_mail_body(mail_body_attribute_t *mail_body)$/;"	f	signature:(mail_body_attribute_t *mail_body)
free_name_nodelist	gmime_smtp.c	/^int free_name_nodelist (struct namenode *nodelist)$/;"	f	signature:(struct namenode *nodelist)
free_rcpt_to	smtpfunc.c	/^int free_rcpt_to(rcpt_to_t *rcpt_to)$/;"	f	signature:(rcpt_to_t *rcpt_to)
free_smtp	smtpfunc.c	/^int free_smtp (SmtpSession_t *p_session)$/;"	f	signature:(SmtpSession_t *p_session)
freeold_copyfromnew_freenew	update_json.c	/^int freeold_copyfromnew_freenew (char **oldstr, char **newstr)$/;"	f	signature:(char **oldstr, char **newstr)
from	srv_echo.c	/^    char *from;$/;"	m	struct:mail_my	file:	access:public
ftp_jsonstr	ftp_extract.c	/^ftp_jsonstr (SESSION_BUFFER_NODE * pronodesrc, char **jsonstr)$/;"	f	signature:(SESSION_BUFFER_NODE * pronodesrc, char **jsonstr)
ftp_session_tbl	webmail_parser.c	/^hash_table *ftp_session_tbl;$/;"	v
g2u	ftp_extract.c	/^g2u (char *inbuf, size_t inlen, char *outbuf, size_t outlen)$/;"	f	signature:(char *inbuf, size_t inlen, char *outbuf, size_t outlen)
gbk2utf8	ftp_extract.c	/^gbk2utf8 (char *utfstr, const char *srcstr, int maxutfstrlen)$/;"	f	signature:(char *utfstr, const char *srcstr, int maxutfstrlen)
generate_redirect_page	srv_echo.c	/^void generate_redirect_page(char * redirect, ci_request_t * req, struct echo_req_data * data)$/;"	f	signature:(char * redirect, ci_request_t * req, struct echo_req_data * data)
generate_redirect_page	srv_echo.c	/^void generate_redirect_page(char *, ci_request_t *, struct echo_req_data *);$/;"	p	file:	signature:(char *, ci_request_t *, struct echo_req_data *)
get_bdat_msg	smtpfunc.c	/^int get_bdat_msg (SmtpSession_t *p_session, char *packstr, unsigned int packlen)$/;"	f	signature:(SmtpSession_t *p_session, char *packstr, unsigned int packlen)
get_file_num	extractmain.c	/^extern int get_file_num(char *jsonstr, int *file_num);$/;"	p	file:	signature:(char *jsonstr, int *file_num)
get_file_num	update_json.c	/^int get_file_num(char *jsonstr, int *file_num)$/;"	f	signature:(char *jsonstr, int *file_num)
get_file_path	update_json.c	/^int get_file_path (char *jsonstr,  char *filepath, int file_flag)$/;"	f	signature:(char *jsonstr, char *filepath, int file_flag)
get_file_path_absolute	update_json.c	/^int get_file_path_absolute (char *jsonsrc, char *filefull_fname, int file_flag)$/;"	f	signature:(char *jsonsrc, char *filefull_fname, int file_flag)
get_file_size	extractmain.c	/^unsigned long get_file_size (const char *path)$/;"	f	signature:(const char *path)
get_file_size	ftp_extract.c	/^get_file_size (const char *path)$/;"	f	file:	signature:(const char *path)
get_file_type_author	update_json.c	/^int get_file_type_author (char *jsonstr, tika_message_s *tika_message)$/;"	f	signature:(char *jsonstr, tika_message_s *tika_message)
get_file_value	update_json.c	/^int get_file_value(char *jsonstr, char *key, char *file_value, int file_flag)$/;"	f	signature:(char *jsonstr, char *key, char *file_value, int file_flag)
get_mail_addr	smtpfunc.c	/^int get_mail_addr(char *mailstr, char **mailaddr)$/;"	f	signature:(char *mailstr, char **mailaddr)
get_protocol_type	update_json.c	/^int get_protocol_type (char *jsonstr)$/;"	f	signature:(char *jsonstr)
get_sys_time	http_IM_parser.c	/^char *get_sys_time()$/;"	f
get_tuple_name	webmail_parser.c	/^int get_tuple_name(HttpSession*dlp_http , char tuple_name[128]  ){$/;"	f	signature:(HttpSession*dlp_http , char tuple_name[128] )
getticks	pfutils.c	/^static __inline__ ticks getticks(void)$/;"	f	file:	signature:(void)
gmime_parse_mailbody	smtp_dissect.c	/^int gmime_parse_mailbody (SmtpSession_t *p_session, char **projson)$/;"	f	signature:(SmtpSession_t *p_session, char **projson)
gmime_tika_send	smtp_dissect.c	/^int gmime_tika_send (struct tuple4 *key, unsigned long max_filesize)$/;"	f	signature:(struct tuple4 *key, unsigned long max_filesize)
h_C	http_parser.c	/^  , h_C$/;"	e	enum:header_states	file:
h_CO	http_parser.c	/^  , h_CO$/;"	e	enum:header_states	file:
h_CON	http_parser.c	/^  , h_CON$/;"	e	enum:header_states	file:
h_connection	http_parser.c	/^  , h_connection$/;"	e	enum:header_states	file:
h_connection_close	http_parser.c	/^  , h_connection_close$/;"	e	enum:header_states	file:
h_connection_keep_alive	http_parser.c	/^  , h_connection_keep_alive$/;"	e	enum:header_states	file:
h_content_length	http_parser.c	/^  , h_content_length$/;"	e	enum:header_states	file:
h_dest	pfutils.c	/^	unsigned char h_dest[ETH_ALEN];$/;"	m	struct:compact_eth_hdr	file:	access:public
h_general	http_parser.c	/^  { h_general = 0$/;"	e	enum:header_states	file:
h_matching_connection	http_parser.c	/^  , h_matching_connection$/;"	e	enum:header_states	file:
h_matching_connection_close	http_parser.c	/^  , h_matching_connection_close$/;"	e	enum:header_states	file:
h_matching_connection_keep_alive	http_parser.c	/^  , h_matching_connection_keep_alive$/;"	e	enum:header_states	file:
h_matching_content_length	http_parser.c	/^  , h_matching_content_length$/;"	e	enum:header_states	file:
h_matching_proxy_connection	http_parser.c	/^  , h_matching_proxy_connection$/;"	e	enum:header_states	file:
h_matching_transfer_encoding	http_parser.c	/^  , h_matching_transfer_encoding$/;"	e	enum:header_states	file:
h_matching_transfer_encoding_chunked	http_parser.c	/^  , h_matching_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_matching_upgrade	http_parser.c	/^  , h_matching_upgrade$/;"	e	enum:header_states	file:
h_proto	pfutils.c	/^	u_int16_t h_proto;$/;"	m	struct:compact_eth_hdr	file:	access:public
h_source	pfutils.c	/^	unsigned char h_source[ETH_ALEN];$/;"	m	struct:compact_eth_hdr	file:	access:public
h_transfer_encoding	http_parser.c	/^  , h_transfer_encoding$/;"	e	enum:header_states	file:
h_transfer_encoding_chunked	http_parser.c	/^  , h_transfer_encoding_chunked$/;"	e	enum:header_states	file:
h_upgrade	http_parser.c	/^  , h_upgrade$/;"	e	enum:header_states	file:
header_states	http_parser.c	/^enum header_states$/;"	g	file:
hex2num	webmail_parser.c	/^int hex2num(char c)$/;"	f	signature:(char c)
hextoi	http_IM_parser.c	/^inline char hextoi(char hexch)$/;"	f	signature:(char hexch)
hop_limit	pfutils.c	/^	u_int8_t hop_limit;$/;"	m	struct:compact_ipv6_hdr	file:	access:public
http	parsertrace.c	/^int http( HttpSession *p_session)$/;"	f	signature:( HttpSession *p_session)
http_IM	http_IM_parser.c	/^int http_IM(HttpSession *dlp_http, char **http_IM_json, http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)$/;"	f	signature:(HttpSession *dlp_http, char **http_IM_json, http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)
http_IM_pro_jsonstr	http_IM_parser.c	/^int http_IM_pro_jsonstr(HttpSession* dlp_http, dlp_http_post_head* http_session, struct IM_file_inf *IM_session, $/;"	f	signature:(HttpSession* dlp_http, dlp_http_post_head* http_session, struct IM_file_inf *IM_session, char **http_IM_json, http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)
http_QQ_2013	http_IM_parser.c	/^int http_QQ_2013(HttpSession *dlp_http, char **http_IM_json, http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)$/;"	f	signature:(HttpSession *dlp_http, char **http_IM_json, http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)
http_QQ_2014	http_IM_parser.c	/^int http_QQ_2014(HttpSession *dlp_http, char **http_IM_json,http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)$/;"	f	signature:(HttpSession *dlp_http, char **http_IM_json,http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)
http_QQ_2014_GOS	http_IM_parser.c	/^int http_QQ_2014_GOS(HttpSession *dlp_http, char **http_IM_json,http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)$/;"	f	signature:(HttpSession *dlp_http, char **http_IM_json,http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)
http_Yahoo_Messager	http_IM_parser.c	/^int http_Yahoo_Messager(HttpSession *dlp_http, char **http_IM_json, http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)$/;"	f	signature:(HttpSession *dlp_http, char **http_IM_json, http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)
http_baidu_pan	http_netdisk.c	/^int http_baidu_pan(HttpSession *dlp_http, char **http_IM_json,http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)$/;"	f	signature:(HttpSession *dlp_http, char **http_IM_json,http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)
http_body_is_final	http_parser.c	/^http_body_is_final(const struct http_parser *parser) {$/;"	f	signature:(const struct http_parser *parser)
http_errno_description	http_parser.c	/^http_errno_description(enum http_errno err) {$/;"	f	signature:(enum http_errno err)
http_errno_name	http_parser.c	/^http_errno_name(enum http_errno err) {$/;"	f	signature:(enum http_errno err)
http_feition	http_IM_parser.c	/^int http_feition(HttpSession *dlp_http, char **http_IM_json,http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)$/;"	f	signature:(HttpSession *dlp_http, char **http_IM_json,http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)
http_feition_5_5_38	http_fei_xin.c	/^ int http_feition_5_5_38(HttpSession *dlp_http, char **http_IM_json,http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)$/;"	f	signature:(HttpSession *dlp_http, char **http_IM_json,http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)
http_host_state	http_parser.c	/^enum http_host_state$/;"	g	file:
http_info	srv_echo.c	/^typedef struct http_info{$/;"	s	file:
http_info	srv_echo.c	/^}http_info;$/;"	t	typeref:struct:http_info	file:
http_info::boundary	srv_echo.c	/^    char *boundary;$/;"	m	struct:http_info	file:	access:public
http_info::clientip	srv_echo.c	/^    char *clientip;$/;"	m	struct:http_info	file:	access:public
http_info::content_length	srv_echo.c	/^    int content_length;$/;"	m	struct:http_info	file:	access:public
http_info::content_type	srv_echo.c	/^    char *content_type;$/;"	m	struct:http_info	file:	access:public
http_info::method	srv_echo.c	/^    char method[MAX_METHOD_SIZE];$/;"	m	struct:http_info	file:	access:public
http_info::url	srv_echo.c	/^    char url[MAX_URL_SIZE];$/;"	m	struct:http_info	file:	access:public
http_mch	parsertrace.c	/^int http_mch(testhttp_string_and_len ** var, testhttp_string_and_len ** Sto,const char *pattern)$/;"	f	signature:(testhttp_string_and_len ** var, testhttp_string_and_len ** Sto,const char *pattern)
http_message_needs_eof	http_parser.c	/^http_message_needs_eof (const http_parser *parser)$/;"	f	signature:(const http_parser *parser)
http_message_needs_eof	http_parser.c	/^int http_message_needs_eof(const http_parser *parser);$/;"	p	file:	signature:(const http_parser *parser)
http_method_str	http_parser.c	/^http_method_str (enum http_method m)$/;"	f	signature:(enum http_method m)
http_parse_host	http_parser.c	/^http_parse_host(const char * buf, struct http_parser_url *u, int found_at) {$/;"	f	file:	signature:(const char * buf, struct http_parser_url *u, int found_at)
http_parse_host_char	http_parser.c	/^http_parse_host_char(enum http_host_state s, const char ch) {$/;"	f	file:	signature:(enum http_host_state s, const char ch)
http_parser_execute	http_parser.c	/^size_t http_parser_execute (http_parser *parser,$/;"	f	signature:(http_parser *parser, const http_parser_settings *settings, const char *data, size_t len)
http_parser_init	http_parser.c	/^void  http_parser_init (http_parser *parser, enum http_parser_type t,HttpSession *p_session)$/;"	f	signature:(http_parser *parser, enum http_parser_type t,HttpSession *p_session)
http_parser_parse_url	http_parser.c	/^http_parser_parse_url(const char *buf, size_t buflen, int is_connect,$/;"	f	signature:(const char *buf, size_t buflen, int is_connect, struct http_parser_url *u)
http_parser_pause	http_parser.c	/^http_parser_pause(http_parser *parser, int paused) {$/;"	f	signature:(http_parser *parser, int paused)
http_parser_version	http_parser.c	/^http_parser_version(void) {$/;"	f	signature:(void)
http_should_keep_alive	http_parser.c	/^http_should_keep_alive (const http_parser *parser)$/;"	f	signature:(const http_parser *parser)
http_strerror_tab	http_parser.c	/^} http_strerror_tab[] = {$/;"	v	typeref:struct:__anon2	file:
http_upload_json	extractmain.c	/^int http_upload_json (SESSION_BUFFER_NODE *pronode, unsigned long max_filesize)$/;"	f	signature:(SESSION_BUFFER_NODE *pronode, unsigned long max_filesize)
httpinf	srv_echo.c	/^    http_info *httpinf;$/;"	m	struct:echo_req_data	file:	access:public
httpupload_pro_jsonstr	ftp_extract.c	/^httpupload_pro_jsonstr (SESSION_BUFFER_NODE * pronodesrc, char **jsonstr)$/;"	f	signature:(SESSION_BUFFER_NODE * pronodesrc, char **jsonstr)
id	pfutils.c	/^	u_int16_t id;$/;"	m	struct:compact_ip_hdr	file:	access:public
ihl	pfutils.c	/^	u_int8_t ihl:4, version:4;$/;"	m	struct:compact_ip_hdr	file:	access:public
ikmem_allocator	imembase.c	/^struct IALLOCATOR ikmem_allocator = $/;"	v	typeref:struct:IALLOCATOR
ikmem_allocator_free	imembase.c	/^static void ikmem_allocator_free(struct IALLOCATOR *, void *);$/;"	p	file:	signature:(struct IALLOCATOR *, void *)
ikmem_allocator_free	imembase.c	/^static void ikmem_allocator_free(struct IALLOCATOR *a, void *ptr)$/;"	f	file:	signature:(struct IALLOCATOR *a, void *ptr)
ikmem_allocator_malloc	imembase.c	/^static void* ikmem_allocator_malloc(struct IALLOCATOR *, unsigned long);$/;"	p	file:	signature:(struct IALLOCATOR *, unsigned long)
ikmem_allocator_malloc	imembase.c	/^static void* ikmem_allocator_malloc(struct IALLOCATOR *a, unsigned long len)$/;"	f	file:	signature:(struct IALLOCATOR *a, unsigned long len)
ikmem_append	imembase.c	/^static void ikmem_append(unsigned long objsize, int approxy)$/;"	f	file:	signature:(unsigned long objsize, int approxy)
ikmem_array	imembase.c	/^static struct IMEMCACHE **ikmem_array = NULL;$/;"	v	typeref:struct:IMEMCACHE	file:
ikmem_cache_alloc	imembase.c	/^void *ikmem_cache_alloc(struct IMEMCACHE *cache)$/;"	f	signature:(struct IMEMCACHE *cache)
ikmem_cache_free	imembase.c	/^void ikmem_cache_free(struct IMEMCACHE *cache, void *ptr)$/;"	f	signature:(struct IMEMCACHE *cache, void *ptr)
ikmem_choose_gfp	imembase.c	/^static struct IMEMGFP *ikmem_choose_gfp(unsigned long objsize, long *w)$/;"	f	file:	signature:(unsigned long objsize, long *w)
ikmem_choose_size	imembase.c	/^static struct IMEMCACHE *ikmem_choose_size(unsigned long size)$/;"	f	file:	signature:(unsigned long size)
ikmem_cost	imembase.c	/^static unsigned long ikmem_cost(unsigned long objsize, struct IMEMGFP *gfp)$/;"	f	file:	signature:(unsigned long objsize, struct IMEMGFP *gfp)
ikmem_count	imembase.c	/^static int ikmem_count = 0;$/;"	v	file:
ikmem_create	imembase.c	/^struct IMEMCACHE* ikmem_create(const char *name, unsigned long size)$/;"	f	signature:(const char *name, unsigned long size)
ikmem_delete	imembase.c	/^void ikmem_delete(struct IMEMCACHE *cache)$/;"	f	signature:(struct IMEMCACHE *cache)
ikmem_free	imembase.c	/^void ikmem_free(void *ptr)$/;"	f	signature:(void *ptr)
ikmem_get	imembase.c	/^struct IMEMCACHE* ikmem_get(const char *name)$/;"	f	signature:(const char *name)
ikmem_head	imembase.c	/^static struct IQUEUEHEAD ikmem_head;$/;"	v	typeref:struct:IQUEUEHEAD	file:
ikmem_info	imembase.c	/^void ikmem_info(unsigned long *inuse, unsigned long *total)$/;"	f	signature:(unsigned long *inuse, unsigned long *total)
ikmem_init	imembase.c	/^void ikmem_init(unsigned long *sizelist)$/;"	f	signature:(unsigned long *sizelist)
ikmem_inited	imembase.c	/^static int ikmem_inited = 0;$/;"	v	file:
ikmem_insert	imembase.c	/^static int ikmem_insert(unsigned long size, struct IMEMGFP *gfp)$/;"	f	file:	signature:(unsigned long size, struct IMEMGFP *gfp)
ikmem_inuse	imembase.c	/^static unsigned long ikmem_inuse;$/;"	v	file:
ikmem_lock	imembase.c	/^static imutex_t ikmem_lock = NULL;$/;"	v	file:
ikmem_lookup	imembase.c	/^static struct IMEMCACHE **ikmem_lookup = NULL;$/;"	v	typeref:struct:IMEMCACHE	file:
ikmem_malloc	imembase.c	/^void* ikmem_malloc(unsigned long size)$/;"	f	signature:(unsigned long size)
ikmem_node	imembase.c	/^static struct IMEMNODE ikmem_node;$/;"	v	typeref:struct:IMEMNODE	file:
ikmem_option	imembase.c	/^void ikmem_option(unsigned long watermark)$/;"	f	signature:(unsigned long watermark)
ikmem_ptr_size	imembase.c	/^unsigned long ikmem_ptr_size(void *ptr)$/;"	f	signature:(void *ptr)
ikmem_quit	imembase.c	/^void ikmem_quit(void)$/;"	f	signature:(void)
ikmem_range_high	imembase.c	/^static unsigned long ikmem_range_high = 0;$/;"	v	file:
ikmem_range_low	imembase.c	/^static unsigned long ikmem_range_low = ~0ul;$/;"	v	file:
ikmem_realloc	imembase.c	/^void* ikmem_realloc(void *ptr, unsigned long size)$/;"	f	signature:(void *ptr, unsigned long size)
ikmem_record	imembase.c	/^static struct IVECTOR ikmem_record;$/;"	v	typeref:struct:IVECTOR	file:
ikmem_root	imembase.c	/^static struct IMEMCACHE *ikmem_root = NULL;$/;"	v	typeref:struct:IMEMCACHE	file:
ikmem_search	imembase.c	/^static struct IMEMCACHE* ikmem_search(const char *name, int needlock)$/;"	f	file:	signature:(const char *name, int needlock)
ikmem_setup_caches	imembase.c	/^static void ikmem_setup_caches(unsigned long *sizelist)$/;"	f	file:	signature:(unsigned long *sizelist)
ikmem_setup_caches	imembase.c	/^static void ikmem_setup_caches(unsigned long *sizelist);$/;"	p	file:	signature:(unsigned long *sizelist)
ikmem_sizemap_l1	imembase.c	/^static void *ikmem_sizemap_l1[257];$/;"	v	file:
ikmem_sizemap_l2	imembase.c	/^static void *ikmem_sizemap_l2[257];$/;"	v	file:
ikmem_vector	imembase.c	/^static struct IVECTOR ikmem_vector;$/;"	v	typeref:struct:IVECTOR	file:
ikmem_waste	imembase.c	/^static unsigned long ikmem_waste(unsigned long objsize, unsigned long psize)$/;"	f	file:	signature:(unsigned long objsize, unsigned long psize)
ikmem_water_mark	imembase.c	/^static unsigned long ikmem_water_mark = 0;$/;"	v	file:
imcache_alloc	imembase.c	/^static void *imcache_alloc(struct IMEMCACHE *cache)$/;"	f	file:	signature:(struct IMEMCACHE *cache)
imcache_calculate	imembase.c	/^static void imcache_calculate(struct IMEMCACHE *cache)$/;"	f	file:	signature:(struct IMEMCACHE *cache)
imcache_calculate	imembase.c	/^static void imcache_calculate(struct IMEMCACHE *cache);$/;"	p	file:	signature:(struct IMEMCACHE *cache)
imcache_check_magic	imembase.c	/^static int imcache_check_magic(void *ptr)$/;"	f	file:	signature:(void *ptr)
imcache_create	imembase.c	/^static struct IMEMCACHE *imcache_create(const char *name, $/;"	f	file:	signature:(const char *name, unsigned long obj_size, struct IMEMGFP *gfp)
imcache_destroy	imembase.c	/^static void imcache_destroy(struct IMEMCACHE *cache)$/;"	f	file:	signature:(struct IMEMCACHE *cache)
imcache_destroy	imembase.c	/^static void imcache_destroy(struct IMEMCACHE *cache);$/;"	p	file:	signature:(struct IMEMCACHE *cache)
imcache_drain_list	imembase.c	/^int imcache_drain_list(struct IMCACHE_LIST3 *mlist, int tofree, int id)$/;"	f	file:	signature:(struct IMCACHE_LIST3 *mlist, int tofree, int id)
imcache_fill_batch	imembase.c	/^static int imcache_fill_batch(struct IMEMCACHE *cache, int array_index)$/;"	f	file:	signature:(struct IMEMCACHE *cache, int array_index)
imcache_free	imembase.c	/^static void *imcache_free(struct IMEMCACHE *cache, void *ptr)$/;"	f	file:	signature:(struct IMEMCACHE *cache, void *ptr)
imcache_gfp_alloc	imembase.c	/^static void *imcache_gfp_alloc(struct IMEMGFP *gfp)$/;"	f	file:	signature:(struct IMEMGFP *gfp)
imcache_gfp_free	imembase.c	/^static void imcache_gfp_free(struct IMEMGFP *gfp, void *ptr)$/;"	f	file:	signature:(struct IMEMGFP *gfp, void *ptr)
imcache_gfp_init	imembase.c	/^static void imcache_gfp_init(struct IMEMCACHE *cache)$/;"	f	file:	signature:(struct IMEMCACHE *cache)
imcache_gfp_init	imembase.c	/^static void imcache_gfp_init(struct IMEMCACHE *cache);$/;"	p	file:	signature:(struct IMEMCACHE *cache)
imcache_init	imembase.c	/^static void imcache_init(void)$/;"	f	file:	signature:(void)
imcache_inited	imembase.c	/^static int imcache_inited = 0;$/;"	v	file:
imcache_list_alloc	imembase.c	/^static void* imcache_list_alloc(struct IMCACHE_LIST3 *mlist)$/;"	f	file:	signature:(struct IMCACHE_LIST3 *mlist)
imcache_list_destroy	imembase.c	/^static void imcache_list_destroy(struct IMCACHE_LIST3 *mlist)$/;"	f	file:	signature:(struct IMCACHE_LIST3 *mlist)
imcache_list_free	imembase.c	/^static void imcache_list_free(struct IMCACHE_LIST3 *mlist, void *ptr)$/;"	f	file:	signature:(struct IMCACHE_LIST3 *mlist, void *ptr)
imcache_list_init	imembase.c	/^static void imcache_list_init(struct IMCACHE_LIST3 *mlist, $/;"	f	file:	signature:(struct IMCACHE_LIST3 *mlist, unsigned long obj_size, int flags, struct IMEMGFP *gfp)
imcache_mutex	imembase.c	/^static imutex_t imcache_mutex = NULL;$/;"	v	file:
imcache_node	imembase.c	/^static struct IMEMNODE imcache_node;$/;"	v	typeref:struct:IMEMNODE	file:
imcache_quit	imembase.c	/^static void imcache_quit(void)$/;"	f	file:	signature:(void)
imcache_release	imembase.c	/^static void imcache_release(struct IMEMCACHE *cache)$/;"	f	file:	signature:(struct IMEMCACHE *cache)
imcache_set_magic	imembase.c	/^static void imcache_set_magic(void *ptr)$/;"	f	file:	signature:(void *ptr)
imcache_slab_create	imembase.c	/^struct IMEMSLAB *imcache_slab_create(struct IMCACHE_LIST3 *mlist, long *cnt)$/;"	f	file:	signature:(struct IMCACHE_LIST3 *mlist, long *cnt)
imcache_slab_destry	imembase.c	/^void imcache_slab_destry(struct IMCACHE_LIST3 *mlist, struct IMEMSLAB *slab)$/;"	f	file:	signature:(struct IMCACHE_LIST3 *mlist, struct IMEMSLAB *slab)
imgfp_alloc_page	imembase.c	/^void* imgfp_alloc_page(struct IMEMGFP *gfp)$/;"	f	signature:(struct IMEMGFP *gfp)
imgfp_free_page	imembase.c	/^void imgfp_free_page(struct IMEMGFP *gfp, void *ptr)$/;"	f	signature:(struct IMEMGFP *gfp, void *ptr)
imlog_destroy	imembase.c	/^void imlog_destroy(void)$/;"	f	signature:(void)
imlog_directory	imembase.c	/^static char imlog_directory[] = ".\/";$/;"	v	file:
imlog_inited	imembase.c	/^static int imlog_inited = 0;$/;"	v	file:
imlog_mask	imembase.c	/^static int imlog_mask = 0;$/;"	v	file:
imlog_mode	imembase.c	/^static int imlog_mode = 0;$/;"	v	file:
imlog_mutex	imembase.c	/^static imutex_t imlog_mutex = NULL;$/;"	v	file:
imlog_setmask	imembase.c	/^void imlog_setmask(int logmask)$/;"	f	signature:(int logmask)
imlog_setup	imembase.c	/^void imlog_setup(imlogging_t handler)$/;"	f	signature:(imlogging_t handler)
imlog_setup_debug	imembase.c	/^void imlog_setup_debug(int logmode)$/;"	f	signature:(int logmode)
imlog_write	imembase.c	/^void imlog_write(int level, const char *fmt, ...)$/;"	f	signature:(int level, const char *fmt, ...)
imlog_writer	imembase.c	/^static imlogging_t imlog_writer = NULL;$/;"	v	file:
imlogging_text_handler	imembase.c	/^static void imlogging_text_handler(const char *text) $/;"	f	file:	signature:(const char *text)
imnode_create	imembase.c	/^imemnode_t *imnode_create(int nodesize, int grow_limit)$/;"	f	signature:(int nodesize, int grow_limit)
imnode_data	imembase.c	/^void*imnode_data(struct IMEMNODE *mnode, long index)$/;"	f	signature:(struct IMEMNODE *mnode, long index)
imnode_del	imembase.c	/^void imnode_del(struct IMEMNODE *mnode, long index)$/;"	f	signature:(struct IMEMNODE *mnode, long index)
imnode_delete	imembase.c	/^void imnode_delete(imemnode_t *mnode)$/;"	f	signature:(imemnode_t *mnode)
imnode_destroy	imembase.c	/^void imnode_destroy(struct IMEMNODE *mnode)$/;"	f	signature:(struct IMEMNODE *mnode)
imnode_grow	imembase.c	/^static long imnode_grow(struct IMEMNODE *mnode)$/;"	f	file:	signature:(struct IMEMNODE *mnode)
imnode_head	imembase.c	/^long imnode_head(struct IMEMNODE *mnode)$/;"	f	signature:(struct IMEMNODE *mnode)
imnode_init	imembase.c	/^void imnode_init(struct IMEMNODE *mn, long nodesize, struct IALLOCATOR *ac)$/;"	f	signature:(struct IMEMNODE *mn, long nodesize, struct IALLOCATOR *ac)
imnode_mem_add	imembase.c	/^static int imnode_mem_add(struct IMEMNODE *mnode, int node_count, void **mem)$/;"	f	file:	signature:(struct IMEMNODE *mnode, int node_count, void **mem)
imnode_new	imembase.c	/^long imnode_new(struct IMEMNODE *mnode)$/;"	f	signature:(struct IMEMNODE *mnode)
imnode_next	imembase.c	/^long imnode_next(struct IMEMNODE *mnode, long index)$/;"	f	signature:(struct IMEMNODE *mnode, long index)
imnode_node_resize	imembase.c	/^static int imnode_node_resize(struct IMEMNODE *mnode, long size)$/;"	f	file:	signature:(struct IMEMNODE *mnode, long size)
impage_alloc	imembase.c	/^void *impage_alloc(void)$/;"	f	signature:(void)
impage_destroy	imembase.c	/^void impage_destroy(void)$/;"	f	signature:(void)
impage_free	imembase.c	/^void impage_free(void *ptr)$/;"	f	signature:(void *ptr)
impage_in	imembase.c	/^static unsigned long impage_in = 0;$/;"	v	file:
impage_info	imembase.c	/^void impage_info(long *pageshift, long *pagesize)$/;"	f	signature:(long *pageshift, long *pagesize)
impage_inited	imembase.c	/^static int impage_inited = 0;$/;"	v	file:
impage_inuse	imembase.c	/^static unsigned long impage_inuse = 0;$/;"	v	file:
impage_mutex	imembase.c	/^static imutex_t impage_mutex = NULL;$/;"	v	file:
impage_node	imembase.c	/^static struct IMEMNODE impage_node;$/;"	v	typeref:struct:IMEMNODE	file:
impage_out	imembase.c	/^static unsigned long impage_out = 0;$/;"	v	file:
impage_psize	imembase.c	/^unsigned long impage_psize = 0;$/;"	v
impage_setup	imembase.c	/^void impage_setup(long pageshift)$/;"	f	signature:(long pageshift)
impage_shift	imembase.c	/^unsigned long impage_shift = 12;$/;"	v
impage_state	imembase.c	/^void impage_state(long *inuse, long *in, long *out)$/;"	f	signature:(long *inuse, long *in, long *out)
imslab_alloc	imembase.c	/^void *imslab_alloc(struct IMEMSLAB *slab)$/;"	f	signature:(struct IMEMSLAB *slab)
imslab_free	imembase.c	/^void imslab_free(struct IMEMSLAB *slab, void *ptr)$/;"	f	signature:(struct IMEMSLAB *slab, void *ptr)
imslab_init	imembase.c	/^long imslab_init(struct IMEMSLAB *slab, void*mem, long len, int dlen, int off)$/;"	f	signature:(struct IMEMSLAB *slab, void*mem, long len, int dlen, int off)
imslabset_del	imembase.c	/^void imslabset_del(struct IMEMSLAB *slab)$/;"	f	signature:(struct IMEMSLAB *slab)
imslabset_destroy	imembase.c	/^void imslabset_destroy(void)$/;"	f	signature:(void)
imslabset_init	imembase.c	/^void imslabset_init(void)$/;"	f	signature:(void)
imslabset_inited	imembase.c	/^static int imslabset_inited = 0;$/;"	v	file:
imslabset_mutex	imembase.c	/^static imutex_t imslabset_mutex = NULL;$/;"	v	file:
imslabset_new	imembase.c	/^struct IMEMSLAB *imslabset_new(void)$/;"	f	signature:(void)
imslabset_node	imembase.c	/^static struct IMEMNODE imslabset_node;$/;"	v	typeref:struct:IMEMNODE	file:
imspin_node	imembase.c	/^static struct IMEMNODE imspin_node;$/;"	v	typeref:struct:IMEMNODE	file:
imutex_cleanup	imembase.c	/^void imutex_cleanup(void)$/;"	f	signature:(void)
imutex_core	imembase.c	/^static long*imutex_core = NULL;$/;"	v	file:
imutex_currentcpu	imembase.c	/^int imutex_currentcpu(void)$/;"	f	signature:(void)
imutex_default_destroy	imembase.c	/^static void imutex_default_destroy(void *mutex) {$/;"	f	file:	signature:(void *mutex)
imutex_default_init	imembase.c	/^static int imutex_default_init(void *mutex) {$/;"	f	file:	signature:(void *mutex)
imutex_default_lock	imembase.c	/^static void imutex_default_lock(void *mutex) {$/;"	f	file:	signature:(void *mutex)
imutex_default_setup	imembase.c	/^void imutex_default_setup(void)$/;"	f	signature:(void)
imutex_default_unlock	imembase.c	/^static void imutex_default_unlock(void *mutex) {$/;"	f	file:	signature:(void *mutex)
imutex_del	imembase.c	/^void imutex_del(imutex_t mutex)$/;"	f	signature:(imutex_t mutex)
imutex_hook	imembase.c	/^static struct IMUTEXHOOK imutex_hook;$/;"	v	typeref:struct:IMUTEXHOOK	file:
imutex_inited	imembase.c	/^static long imutex_inited = 0;$/;"	v	file:
imutex_lock	imembase.c	/^void imutex_lock(imutex_t mutex)$/;"	f	signature:(imutex_t mutex)
imutex_master	imembase.c	/^static long imutex_master = -1;$/;"	v	file:
imutex_neglect	imembase.c	/^void imutex_neglect(int isneglect)$/;"	f	signature:(int isneglect)
imutex_neglected	imembase.c	/^static long imutex_neglected = 0;$/;"	v	file:
imutex_new	imembase.c	/^imutex_t imutex_new(void)$/;"	f	signature:(void)
imutex_node	imembase.c	/^static struct IMEMNODE imutex_node;$/;"	v	typeref:struct:IMEMNODE	file:
imutex_setup	imembase.c	/^void imutex_setup(struct IMUTEXHOOK *hook)$/;"	f	signature:(struct IMUTEXHOOK *hook)
imutex_unlock	imembase.c	/^void imutex_unlock(imutex_t mutex)$/;"	f	signature:(imutex_t mutex)
imutex_win32	imembase.c	/^static struct IMUTEXHOOK imutex_win32 = {$/;"	v	typeref:struct:IMUTEXHOOK	file:
imv_free	imembase.c	/^void imv_free(struct IALLOCATOR *allocator, void *ptr)$/;"	f	signature:(struct IALLOCATOR *allocator, void *ptr)
imv_free_ptr	imembase.c	/^void (*imv_free_ptr)(void *mem) = 0;$/;"	v
imv_malloc	imembase.c	/^void* imv_malloc(struct IALLOCATOR *allocator, unsigned long size)$/;"	f	signature:(struct IALLOCATOR *allocator, unsigned long size)
imv_malloc_ptr	imembase.c	/^void *(*imv_malloc_ptr)(unsigned long size) = 0;$/;"	v
init_IM_list	read_IM_config.c	/^_IM_HOST_URL_REG  *init_IM_list()$/;"	f
init_att_nodelist	webmail_attach.c	/^struct att_node *init_att_nodelist()$/;"	f
init_lock_for_sync	session_buf.c	/^int init_lock_for_sync(int iringbuffer_ID, int iringbuffer_qlength)\/\/initializing the semaphore lock_object$/;"	f	signature:(int iringbuffer_ID, int iringbuffer_qlength)
init_name_nodelist	gmime_smtp.c	/^struct namenode *init_name_nodelist()$/;"	f
init_slock_for_sync	session_buf.c	/^int init_slock_for_sync(int iringbuffer_ID, int iringbuffer_qlength)\/\/initializing the semaphore lock_object$/;"	f	signature:(int iringbuffer_ID, int iringbuffer_qlength)
init_testhttp_string_and_len	parsertrace.c	/^testhttp_string_and_len *init_testhttp_string_and_len()$/;"	f
init_webmail_string_and_len	webmail_parser.c	/^webmail_string_and_len *init_webmail_string_and_len()$/;"	f
insert_hash	beap_hash.c	/^void insert_hash(hash_table * tbl, hash_bucket * elem, int len)$/;"	f	signature:(hash_table * tbl, hash_bucket * elem, int len)
int_to_ipstr	ftp_extract.c	/^int_to_ipstr (int src, char *str)$/;"	f	signature:(int src, char *str)
int_to_ipstr	update_json.c	/^static int int_to_ipstr(int src, char *str)$/;"	f	file:	signature:(int src, char *str)
is_mail	srv_echo.c	/^    int is_mail;$/;"	m	struct:echo_req_data	file:	access:public
is_not_null	extractmain.c	/^int is_not_null(SESSION_BUFFER_NODE *pronode)$/;"	f	signature:(SESSION_BUFFER_NODE *pronode)
isgbk	ftp_extract.c	/^isgbk (char *s, size_t ns)$/;"	f	signature:(char *s, size_t ns)
ishttpsource	srv_echo.c	/^int ishttpsource(char *url)$/;"	f	signature:(char *url)
itoa	webmail_parser.c	/^char *itoa(int num,char*str,int radix)$/;"	f	signature:(int num,char*str,int radix)
iv_create	imembase.c	/^ivector_t *iv_create(void)$/;"	f	signature:(void)
iv_delete	imembase.c	/^void iv_delete(ivector_t *vec)$/;"	f	signature:(ivector_t *vec)
iv_destroy	imembase.c	/^void iv_destroy(struct IVECTOR *v)$/;"	f	signature:(struct IVECTOR *v)
iv_init	imembase.c	/^void iv_init(struct IVECTOR *v, struct IALLOCATOR *allocator)$/;"	f	signature:(struct IVECTOR *v, struct IALLOCATOR *allocator)
iv_resize	imembase.c	/^int iv_resize(struct IVECTOR *v, unsigned long newsize)$/;"	f	signature:(struct IVECTOR *v, unsigned long newsize)
jdmail	webmail_parser.c	/^    int jdmail(char* host_ori_ref)$/;"	f	signature:(char* host_ori_ref)
jdmail_att	webmail_parser.c	/^int jdmail_att(HttpSession* dlp_http, dlp_webmail_info *webmail, char* host_ori_ref, char**webmailjson, http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)$/;"	f	signature:(HttpSession* dlp_http, dlp_webmail_info *webmail, char* host_ori_ref, char**webmailjson, http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)
jdmail_my	srv_echo.c	/^int jdmail_my(char *);$/;"	p	file:	signature:(char *)
jdmail_my	srv_echo.c	/^int jdmail_my(char *host_ori_ref)$/;"	f	signature:(char *host_ori_ref)
jdmail_type	webmail_parser.c	/^    int jdmail_type(char*host_ori_ref)$/;"	f	signature:(char*host_ori_ref)
jdmail_type_my	srv_echo.c	/^int jdmail_type_my(char *);$/;"	p	file:	signature:(char *)
jdmail_type_my	srv_echo.c	/^int jdmail_type_my(char *host_ori_ref)$/;"	f	signature:(char *host_ori_ref)
jvm	fileparse.c	/^JavaVM *jvm;$/;"	v
last_mark	update_json.c	/^int last_mark (char *str, char mark)$/;"	f	signature:(char *str, char mark)
lockqq	webmail_parser.c	/^pthread_mutex_t lockqq=PTHREAD_MUTEX_INITIALIZER;$/;"	v
locksohu	webmail_parser.c	/^pthread_mutex_t locksohu=PTHREAD_MUTEX_INITIALIZER;$/;"	v
log_printf	plog.c	/^void log_printf(unsigned int level, char *fmt, ...){$/;"	f	signature:(unsigned int level, char *fmt, ...)
mail_139	webmail_parser.c	/^int mail_139(webmail_string_and_len *StoCK,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoCK,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
mail_189	webmail_parser.c	/^int mail_189(webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
mail_my	srv_echo.c	/^typedef struct mail_my{$/;"	s	file:
mail_my::content	srv_echo.c	/^    char *content;$/;"	m	struct:mail_my	file:	access:public
mail_my::from	srv_echo.c	/^    char *from;$/;"	m	struct:mail_my	file:	access:public
mail_my::subject	srv_echo.c	/^    char *subject;$/;"	m	struct:mail_my	file:	access:public
mail_my::to	srv_echo.c	/^    char *to;$/;"	m	struct:mail_my	file:	access:public
match_IM_url	http_IM_parser.c	/^int match_IM_url(char *src, const char *pattern)$/;"	f	signature:(char *src, const char *pattern)
mch	webmail_parser.c	/^int mch( webmail_string_and_len ** var, webmail_string_and_len ** Sto,const char *pattern)$/;"	f	signature:( webmail_string_and_len ** var, webmail_string_and_len ** Sto,const char *pattern)
mch_att	webmail_parser.c	/^int mch_att(webmail_string_and_len ** var,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len ** var,dlp_webmail_info *webmail)
mch_att_139	webmail_parser.c	/^int mch_att_139(webmail_string_and_len **var, webmail_string_and_len **sto, webmail_string_and_len *StoBY, dlp_webmail_info *webmail , char **filename)$/;"	f	signature:(webmail_string_and_len **var, webmail_string_and_len **sto, webmail_string_and_len *StoBY, dlp_webmail_info *webmail , char **filename)
mch_att_139_multi_session	webmail_parser.c	/^int mch_att_139_multi_session( webmail_string_and_len *StoMB , webmail_string_and_len *StoBY , dlp_webmail_info *webmail)$/;"	f	signature:( webmail_string_and_len *StoMB , webmail_string_and_len *StoBY , dlp_webmail_info *webmail)
mch_sundy_research	webmail_parser.c	/^int mch_sundy_research(webmail_string_and_len * var, webmail_string_and_len ** Sto1, int Rloca, const char pattern1[PATTERN_LENGTH])$/;"	f	signature:(webmail_string_and_len * var, webmail_string_and_len ** Sto1, int Rloca, const char pattern1[PATTERN_LENGTH])
mch_t	webmail_parser.c	/^int mch_t( webmail_string_and_len ** var, char Sto[MAX_REGEX_RESULT_LEN],const char *pattern)$/;"	f	signature:( webmail_string_and_len ** var, char Sto[MAX_REGEX_RESULT_LEN],const char *pattern)
method	srv_echo.c	/^    char method[MAX_METHOD_SIZE];$/;"	m	struct:http_info	file:	access:public
method_strings	http_parser.c	/^static const char *method_strings[] =$/;"	v	file:
mime_att	srv_echo.c	/^        mime_att,$/;"	e	enum:echo_req_data::__anon1	file:
msec2dhmsm	pfutils.c	/^char *msec2dhmsm(u_int64_t msec, char *buf, u_int buf_len)$/;"	f	signature:(u_int64_t msec, char *buf, u_int buf_len)
msg	srv_echo.c	/^    char msg[BUFSIZE];$/;"	m	struct:file_msg	file:	access:public
msg_st	srv_echo.c	/^struct msg_st$/;"	s	file:
msg_st::msg_type	srv_echo.c	/^    long int msg_type;$/;"	m	struct:msg_st	file:	access:public
msg_st::text	srv_echo.c	/^    char text[BUFSIZ];$/;"	m	struct:msg_st	file:	access:public
msg_type	srv_echo.c	/^    long int msg_type;$/;"	m	struct:msg_st	file:	access:public
mtype	srv_echo.c	/^    long int mtype;$/;"	m	struct:file_msg	file:	access:public
mysmtp	gmime_smtp.c	/^int mysmtp (char *emlpath, char **projson)$/;"	f	signature:(char *emlpath, char **projson)
name	http_parser.c	/^  const char *name;$/;"	m	struct:__anon2	file:	access:public
nexthdr	pfutils.c	/^	u_int8_t nexthdr;$/;"	m	struct:compact_ipv6_hdr	file:	access:public
no_att	srv_echo.c	/^        no_att,$/;"	e	enum:echo_req_data::__anon1	file:
normal_att	srv_echo.c	/^        normal_att,$/;"	e	enum:echo_req_data::__anon1	file:
normal_url_char	http_parser.c	/^static const uint8_t normal_url_char[32] = {$/;"	v	file:
null	ftp_extract.c	44;"	d	file:
numcapture	smtpfunc.c	/^int numcapture (char *str, int *num)$/;"	f	signature:(char *str, int *num)
on_body	parsertrace.c	/^int on_body(http_parser* parser, const char* at, size_t length) {$/;"	f	signature:(http_parser* parser, const char* at, size_t length)
on_header_field	parsertrace.c	/^int on_header_field(http_parser* parser, const char* at, size_t length) {$/;"	f	signature:(http_parser* parser, const char* at, size_t length)
on_header_value	parsertrace.c	/^int on_header_value(http_parser* parser, const char* at, size_t length) {$/;"	f	signature:(http_parser* parser, const char* at, size_t length)
on_headers_complete	parsertrace.c	/^int on_headers_complete(http_parser* _) {$/;"	f	signature:(http_parser* _)
on_message_begin	parsertrace.c	/^int on_message_begin(http_parser* _) {$/;"	f	signature:(http_parser* _)
on_message_complete	parsertrace.c	/^int on_message_complete(http_parser* _) {$/;"	f	signature:(http_parser* _)
on_url	parsertrace.c	/^int on_url(http_parser*parser, const char* at, size_t length) {$/;"	f	signature:(http_parser*parser, const char* at, size_t length)
outdata	extractmain.c	/^int outdata;$/;"	v
parse_message	gmime_smtp.c	/^GMimeMessage *parse_message (int fd)$/;"	f	signature:(int fd)
parse_url_char	http_parser.c	/^parse_url_char(enum state s, const char ch)$/;"	f	file:	signature:(enum state s, const char ch)
parser_baidu_pan_data_msg	http_netdisk.c	/^int parser_baidu_pan_data_msg(char *uuid, int post_num, int flag, dlp_http_post_head *http_session)$/;"	f	signature:(char *uuid, int post_num, int flag, dlp_http_post_head *http_session)
parser_feition_init	http_IM_parser.c	/^int parser_feition_init(struct IM_file_inf *f_inf, dlp_http_post_head *http_session)$/;"	f	signature:(struct IM_file_inf *f_inf, dlp_http_post_head *http_session)
paser_blog	http_IM_parser.c	/^char *paser_blog(char *src, const char *pattern)$/;"	f	signature:(char *src, const char *pattern)
payload_len	pfutils.c	/^	u_int16_t payload_len;$/;"	m	struct:compact_ipv6_hdr	file:	access:public
plustospace	http_IM_parser.c	/^char* plustospace( char* str )$/;"	f	signature:( char* str )
priority	pfutils.c	/^	u_int8_t priority:4, version:4;$/;"	m	struct:compact_ipv6_hdr	file:	access:public
pro_smtp_jsonstr	gmime_smtp.c	/^int pro_smtp_jsonstr(GMimeMessage *message, char *emlpath, struct namenode* nodelist, char **projson)$/;"	f	signature:(GMimeMessage *message, char *emlpath, struct namenode* nodelist, char **projson)
protocol	pfutils.c	/^	u_int8_t protocol;$/;"	m	struct:compact_ip_hdr	file:	access:public
random_uuid	extractmain.c	/^int random_uuid(char buf[128]) $/;"	f	signature:(char buf[128])
rbuff_create	session_buf.c	/^int rbuff_create (int irb_qlength)$/;"	f	signature:(int irb_qlength)
rbuff_destroy	session_buf.c	/^int rbuff_destroy(int iringbuffer_ID)$/;"	f	signature:(int iringbuffer_ID)
rbuff_getdata	session_buf.c	/^int rbuff_getdata(const int iringbuffer_ID, void *pData, struct pcap_pkthdr *hdr, struct tuple5 *session_five_attr)$/;"	f	signature:(const int iringbuffer_ID, void *pData, struct pcap_pkthdr *hdr, struct tuple5 *session_five_attr)
rbuff_putdata	session_buf.c	/^int rbuff_putdata(const int iringbuffer_ID, void *pData, struct pcap_pkthdr *hdr, struct tuple5 *session_five_attr)$/;"	f	signature:(const int iringbuffer_ID, void *pData, struct pcap_pkthdr *hdr, struct tuple5 *session_five_attr)
read_IM_config	read_IM_config.c	/^int read_IM_config()$/;"	f
receive_msg	srv_echo.c	/^int receive_msg(struct file_msg  *arg) {$/;"	f	signature:(struct file_msg *arg)
receive_msg_t	srv_echo.c	/^receive_msg_t (struct file_msg *arg)$/;"	f	signature:(struct file_msg *arg)
record_log	extractmain.c	/^int record_log (char *logname, char *thing, int *data)$/;"	f	signature:(char *logname, char *thing, int *data)
recv_msg_from_policy	srv_echo.c	/^int recv_msg_from_policy(struct file_msg *arg)$/;"	f	signature:(struct file_msg *arg)
remove_flist	update_json.c	/^int remove_flist (char *jsonstr, char **jsondest, int file_flag) $/;"	f	signature:(char *jsonstr, char **jsondest, int file_flag)
remove_hash	beap_hash.c	/^void remove_hash(hash_table * tbl, hash_bucket * elem, int len)$/;"	f	signature:(hash_table * tbl, hash_bucket * elem, int len)
remove_pid_file	pfutils.c	/^void remove_pid_file(char *pidFile)$/;"	f	signature:(char *pidFile)
req	srv_echo.c	/^    ci_request_t *req;$/;"	m	struct:echo_req_data	file:	access:public
reset_smtp_session	smtpfunc.c	/^int reset_smtp_session (SmtpSession_t *p_session)$/;"	f	signature:(SmtpSession_t *p_session)
s_body_identity	http_parser.c	/^  , s_body_identity$/;"	e	enum:state	file:
s_body_identity_eof	http_parser.c	/^  , s_body_identity_eof$/;"	e	enum:state	file:
s_chunk_data	http_parser.c	/^  , s_chunk_data$/;"	e	enum:state	file:
s_chunk_data_almost_done	http_parser.c	/^  , s_chunk_data_almost_done$/;"	e	enum:state	file:
s_chunk_data_done	http_parser.c	/^  , s_chunk_data_done$/;"	e	enum:state	file:
s_chunk_parameters	http_parser.c	/^  , s_chunk_parameters$/;"	e	enum:state	file:
s_chunk_size	http_parser.c	/^  , s_chunk_size$/;"	e	enum:state	file:
s_chunk_size_almost_done	http_parser.c	/^  , s_chunk_size_almost_done$/;"	e	enum:state	file:
s_chunk_size_start	http_parser.c	/^  , s_chunk_size_start$/;"	e	enum:state	file:
s_dead	http_parser.c	/^  { s_dead = 1 \/* important that this is > 0 *\/$/;"	e	enum:state	file:
s_head_field	parsertrace.c	/^char *s_head_field[HEAD_FIELD_INDEX_MAX] =$/;"	v
s_header_almost_done	http_parser.c	/^  , s_header_almost_done$/;"	e	enum:state	file:
s_header_field	http_parser.c	/^  , s_header_field$/;"	e	enum:state	file:
s_header_field_start	http_parser.c	/^  , s_header_field_start$/;"	e	enum:state	file:
s_header_value	http_parser.c	/^  , s_header_value$/;"	e	enum:state	file:
s_header_value_discard_lws	http_parser.c	/^  , s_header_value_discard_lws$/;"	e	enum:state	file:
s_header_value_discard_ws	http_parser.c	/^  , s_header_value_discard_ws$/;"	e	enum:state	file:
s_header_value_discard_ws_almost_done	http_parser.c	/^  , s_header_value_discard_ws_almost_done$/;"	e	enum:state	file:
s_header_value_lws	http_parser.c	/^  , s_header_value_lws$/;"	e	enum:state	file:
s_header_value_start	http_parser.c	/^  , s_header_value_start$/;"	e	enum:state	file:
s_headers_almost_done	http_parser.c	/^  , s_headers_almost_done$/;"	e	enum:state	file:
s_headers_done	http_parser.c	/^  , s_headers_done$/;"	e	enum:state	file:
s_http_host	http_parser.c	/^  , s_http_host$/;"	e	enum:http_host_state	file:
s_http_host_dead	http_parser.c	/^    s_http_host_dead = 1$/;"	e	enum:http_host_state	file:
s_http_host_port	http_parser.c	/^  , s_http_host_port$/;"	e	enum:http_host_state	file:
s_http_host_port_start	http_parser.c	/^  , s_http_host_port_start$/;"	e	enum:http_host_state	file:
s_http_host_start	http_parser.c	/^  , s_http_host_start$/;"	e	enum:http_host_state	file:
s_http_host_v6	http_parser.c	/^  , s_http_host_v6$/;"	e	enum:http_host_state	file:
s_http_host_v6_end	http_parser.c	/^  , s_http_host_v6_end$/;"	e	enum:http_host_state	file:
s_http_host_v6_start	http_parser.c	/^  , s_http_host_v6_start$/;"	e	enum:http_host_state	file:
s_http_userinfo	http_parser.c	/^  , s_http_userinfo$/;"	e	enum:http_host_state	file:
s_http_userinfo_start	http_parser.c	/^  , s_http_userinfo_start$/;"	e	enum:http_host_state	file:
s_message_done	http_parser.c	/^  , s_message_done$/;"	e	enum:state	file:
s_req_first_http_major	http_parser.c	/^  , s_req_first_http_major$/;"	e	enum:state	file:
s_req_first_http_minor	http_parser.c	/^  , s_req_first_http_minor$/;"	e	enum:state	file:
s_req_fragment	http_parser.c	/^  , s_req_fragment$/;"	e	enum:state	file:
s_req_fragment_start	http_parser.c	/^  , s_req_fragment_start$/;"	e	enum:state	file:
s_req_http_H	http_parser.c	/^  , s_req_http_H$/;"	e	enum:state	file:
s_req_http_HT	http_parser.c	/^  , s_req_http_HT$/;"	e	enum:state	file:
s_req_http_HTT	http_parser.c	/^  , s_req_http_HTT$/;"	e	enum:state	file:
s_req_http_HTTP	http_parser.c	/^  , s_req_http_HTTP$/;"	e	enum:state	file:
s_req_http_major	http_parser.c	/^  , s_req_http_major$/;"	e	enum:state	file:
s_req_http_minor	http_parser.c	/^  , s_req_http_minor$/;"	e	enum:state	file:
s_req_http_start	http_parser.c	/^  , s_req_http_start$/;"	e	enum:state	file:
s_req_line_almost_done	http_parser.c	/^  , s_req_line_almost_done$/;"	e	enum:state	file:
s_req_method	http_parser.c	/^  , s_req_method$/;"	e	enum:state	file:
s_req_path	http_parser.c	/^  , s_req_path$/;"	e	enum:state	file:
s_req_query_string	http_parser.c	/^  , s_req_query_string$/;"	e	enum:state	file:
s_req_query_string_start	http_parser.c	/^  , s_req_query_string_start$/;"	e	enum:state	file:
s_req_schema	http_parser.c	/^  , s_req_schema$/;"	e	enum:state	file:
s_req_schema_slash	http_parser.c	/^  , s_req_schema_slash$/;"	e	enum:state	file:
s_req_schema_slash_slash	http_parser.c	/^  , s_req_schema_slash_slash$/;"	e	enum:state	file:
s_req_server	http_parser.c	/^  , s_req_server$/;"	e	enum:state	file:
s_req_server_start	http_parser.c	/^  , s_req_server_start$/;"	e	enum:state	file:
s_req_server_with_at	http_parser.c	/^  , s_req_server_with_at$/;"	e	enum:state	file:
s_req_spaces_before_url	http_parser.c	/^  , s_req_spaces_before_url$/;"	e	enum:state	file:
s_res_H	http_parser.c	/^  , s_res_H$/;"	e	enum:state	file:
s_res_HT	http_parser.c	/^  , s_res_HT$/;"	e	enum:state	file:
s_res_HTT	http_parser.c	/^  , s_res_HTT$/;"	e	enum:state	file:
s_res_HTTP	http_parser.c	/^  , s_res_HTTP$/;"	e	enum:state	file:
s_res_first_http_major	http_parser.c	/^  , s_res_first_http_major$/;"	e	enum:state	file:
s_res_first_http_minor	http_parser.c	/^  , s_res_first_http_minor$/;"	e	enum:state	file:
s_res_first_status_code	http_parser.c	/^  , s_res_first_status_code$/;"	e	enum:state	file:
s_res_http_major	http_parser.c	/^  , s_res_http_major$/;"	e	enum:state	file:
s_res_http_minor	http_parser.c	/^  , s_res_http_minor$/;"	e	enum:state	file:
s_res_line_almost_done	http_parser.c	/^  , s_res_line_almost_done$/;"	e	enum:state	file:
s_res_or_resp_H	http_parser.c	/^  , s_res_or_resp_H$/;"	e	enum:state	file:
s_res_status	http_parser.c	/^  , s_res_status$/;"	e	enum:state	file:
s_res_status_code	http_parser.c	/^  , s_res_status_code$/;"	e	enum:state	file:
s_res_status_start	http_parser.c	/^  , s_res_status_start$/;"	e	enum:state	file:
s_start_req	http_parser.c	/^  , s_start_req$/;"	e	enum:state	file:
s_start_req_or_res	http_parser.c	/^  , s_start_req_or_res$/;"	e	enum:state	file:
s_start_res	http_parser.c	/^  , s_start_res$/;"	e	enum:state	file:
saddr	pfutils.c	/^	u_int32_t saddr;$/;"	m	struct:compact_ip_hdr	file:	access:public
sbuff_create	session_buf.c	/^int sbuff_create (int irb_qlength)$/;"	f	signature:(int irb_qlength)
sbuff_destroy	session_buf.c	/^int sbuff_destroy(int iringbuffer_ID)$/;"	f	signature:(int iringbuffer_ID)
sbuff_getdata	session_buf.c	/^int sbuff_getdata(const int iringbuffer_ID, SESSION_BUFFER_NODE *hdr)$/;"	f	signature:(const int iringbuffer_ID, SESSION_BUFFER_NODE *hdr)
sbuff_putdata	session_buf.c	/^int sbuff_putdata(const int iringbuffer_ID, SESSION_BUFFER_NODE ft)$/;"	f	signature:(const int iringbuffer_ID, SESSION_BUFFER_NODE ft)
sbuff_putdata	srv_echo.c	/^extern int sbuff_putdata(const int iringbuffer_ID, SESSION_BUFFER_NODE ft) ;$/;"	p	file:	signature:(const int iringbuffer_ID, SESSION_BUFFER_NODE ft)
sbuff_putdata	webmail_parser.c	/^extern int sbuff_putdata(const int iringbuffer_ID, SESSION_BUFFER_NODE ft) ;$/;"	p	file:	signature:(const int iringbuffer_ID, SESSION_BUFFER_NODE ft)
seen_dot	smtp_dissect.c	/^int seen_dot (SmtpSession_t *p_sessionsrc, char *packstr, unsigned int packlen, smtp_sbuffputdata sbuff_putdata, int sbuffer_id)$/;"	f	signature:(SmtpSession_t *p_sessionsrc, char *packstr, unsigned int packlen, smtp_sbuffputdata sbuff_putdata, int sbuffer_id)
send_json	extractmain.c	/^int send_json(SESSION_BUFFER_NODE *pronode,unsigned long max_filesize)$/;"	f	signature:(SESSION_BUFFER_NODE *pronode,unsigned long max_filesize)
send_msgqueue	extractmain.c	/^int send_msgqueue (char *jsondest, char *strpath)$/;"	f	signature:(char *jsondest, char *strpath)
service	srv_echo.c	/^CI_DECLARE_MOD_DATA ci_service_module_t service = {$/;"	v
session_comp	beap_hash.c	/^unsigned char session_comp(void *key1, void *key2, int len)$/;"	f	signature:(void *key1, void *key2, int len)
session_hash	beap_hash.c	/^uint32_t session_hash(void *key, int len)$/;"	f	signature:(void *key, int len)
set_mailenvelope_rcpt_from	smtpfunc.c	/^int set_mailenvelope_rcpt_from (SmtpSession_t *p_sessionsrc, char *jsonsrc, char **jsondest)$/;"	f	signature:(SmtpSession_t *p_sessionsrc, char *jsonsrc, char **jsondest)
set_tika_message	update_json.c	/^int set_tika_message (char *jsonsrc, char **jsondest, tika_message_s tika_message, char *file_content_path, int file_flag)$/;"	f	signature:(char *jsonsrc, char **jsondest, tika_message_s tika_message, char *file_content_path, int file_flag)
set_tika_message_bak	update_json.c	/^int set_tika_message_bak (char *jsonsrc, char **jsondest, tika_message_s tika_message, char *file_content_path, int file_flag)$/;"	f	signature:(char *jsonsrc, char **jsondest, tika_message_s tika_message, char *file_content_path, int file_flag)
show_name_nodelist	gmime_smtp.c	/^int show_name_nodelist (struct namenode* nodelist)$/;"	f	signature:(struct namenode* nodelist)
show_session	update_json.c	/^int show_session(SESSION_BUFFER_NODE *pronode)$/;"	f	signature:(SESSION_BUFFER_NODE *pronode)
show_smtp	smtpfunc.c	/^int show_smtp (SmtpSession_t *p_session)$/;"	f	signature:(SmtpSession_t *p_session)
sina_attach	webmail_parser.c	/^int sina_attach(webmail_string_and_len *StoPT,webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoPT,webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
sina_mail	webmail_parser.c	/^int sina_mail(webmail_string_and_len *StoPT,webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoPT,webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
smtp_get_file_size	smtpfunc.c	/^unsigned long smtp_get_file_size (char *path)$/;"	f	signature:(char *path)
sohu_attach	webmail_parser.c	/^int sohu_attach(webmail_string_and_len *StoPT,webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoPT,webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
sohu_attach2	webmail_parser.c	/^int sohu_attach2(HttpSession* dlp_http,webmail_string_and_len *StoPT,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(HttpSession* dlp_http,webmail_string_and_len *StoPT,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
sohu_mail	webmail_parser.c	/^int sohu_mail(webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
ssbuffer_id	webmail_parser.c	/^int ssbuffer_id = -1;$/;"	v
start_state	http_parser.c	401;"	d	file:
state	http_parser.c	/^enum state$/;"	g	file:
store_smtp_data	smtpfunc.c	/^int store_smtp_data (SmtpSession_t *p_session, char *packstr, unsigned int packlen)$/;"	f	signature:(SmtpSession_t *p_session, char *packstr, unsigned int packlen)
subject	srv_echo.c	/^    char *subject;$/;"	m	struct:mail_my	file:	access:public
system_time	webmail_parser.c	/^int system_time(char *nowtime)$/;"	f	signature:(char *nowtime)
text	srv_echo.c	/^    char text[BUFSIZ];$/;"	m	struct:msg_st	file:	access:public
ticks	pfutils.c	/^typedef u_int64_t ticks;$/;"	t	file:
tika	fileparse.c	/^char* tika(char* filepath,char* tofilepath)$/;"	f	signature:(char* filepath,char* tofilepath)
tika_consumer_thread	webmail_parser.c	/^void* tika_consumer_thread(void* _id) $/;"	f	signature:(void* _id)
tika_file_parser	extractmain.c	/^int tika_file_parser (char *filefull_fname, char *file_content_path, tika_message_s *tika_message)$/;"	f	signature:(char *filefull_fname, char *file_content_path, tika_message_s *tika_message)
time_convert	webmail_parser.c	/^int time_convert(char* time1,char*s)$/;"	f	signature:(char* time1,char*s)
to	srv_echo.c	/^    char *to;$/;"	m	struct:mail_my	file:	access:public
to_json	webmail_parser.c	/^int to_json(json_t * tolist , char * webmail_to)$/;"	f	signature:(json_t * tolist , char * webmail_to)
tokens	http_parser.c	/^static const char tokens[256] = {$/;"	v	file:
tom_attach	webmail_parser.c	/^int tom_attach(webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
tom_mail	webmail_parser.c	/^int tom_mail(webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
tos	pfutils.c	/^	u_int8_t tos;$/;"	m	struct:compact_ip_hdr	file:	access:public
tot_len	pfutils.c	/^	u_int16_t tot_len;$/;"	m	struct:compact_ip_hdr	file:	access:public
trace	pfutils.c	/^void trace(int trace_level, char *file, int line, char *format, ...)$/;"	f	signature:(int trace_level, char *file, int line, char *format, ...)
ttl	pfutils.c	/^	u_int8_t ttl;$/;"	m	struct:compact_ip_hdr	file:	access:public
u2g	ftp_extract.c	/^u2g (char *inbuf, size_t inlen, char *outbuf, size_t outlen)$/;"	f	signature:(char *inbuf, size_t inlen, char *outbuf, size_t outlen)
unescape	http_IM_parser.c	/^char* unescape( char* s)$/;"	f	signature:( char* s)
unhex	http_parser.c	/^static const int8_t unhex[256] =$/;"	v	file:
update_filelist_int_value	update_json.c	/^int update_filelist_int_value (char *jsonsrc, char **jsondest, char *key, int value, int file_flag)$/;"	f	signature:(char *jsonsrc, char **jsondest, char *key, int value, int file_flag)
update_filelist_value	update_json.c	/^int update_filelist_value (char *jsonsrc, char **jsondest, char *key, char *value, int file_flag)$/;"	f	signature:(char *jsonsrc, char **jsondest, char *key, char *value, int file_flag)
upload_test	srv_echo.c	/^        upload_test,$/;"	e	enum:echo_req_data::__anon1	file:
url	srv_echo.c	/^    char url[MAX_URL_SIZE];$/;"	m	struct:http_info	file:	access:public
usage	parsertrace.c	/^void usage(const char* name) {$/;"	f	signature:(const char* name)
version	pfutils.c	/^	u_int8_t ihl:4, version:4;$/;"	m	struct:compact_ip_hdr	file:	access:public
version	pfutils.c	/^	u_int8_t priority:4, version:4;$/;"	m	struct:compact_ipv6_hdr	file:	access:public
web_URLDecode	webmail_parser.c	/^int web_URLDecode(const char* str, const int strSize, char* result, const int resultSize)$/;"	f	signature:(const char* str, const int strSize, char* result, const int resultSize)
webmail_free_HttpSession	webmail_parser.c	/^    int webmail_free_HttpSession (HttpSession* dlp_http){$/;"	f	signature:(HttpSession* dlp_http)
webmail_info	srv_echo.c	/^}webmail_info;$/;"	t	typeref:struct:mail_my	file:
webmail_mail	webmail_parser.c	/^    int webmail_mail(HttpSession* dlp_http,char **webmailjson, http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)$/;"	f	signature:(HttpSession* dlp_http,char **webmailjson, http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)
webmail_pro_jsonstr	webmail_parser.c	/^    int webmail_pro_jsonstr(HttpSession* dlp_http,dlp_webmail_info *webmail, char **webmailjson, http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)$/;"	f	signature:(HttpSession* dlp_http,dlp_webmail_info *webmail, char **webmailjson, http_sbuffputdata sbuff_putdata, const int iringbuffer_ID)
webmail_to_parser	webmail_parser.c	/^int webmail_to_parser(webmail_string_and_len *var , char *sto ){$/;"	f	signature:(webmail_string_and_len *var , char *sto )
while_show_smtp	smtpfunc.c	/^int while_show_smtp(SmtpSession_t *p_session)$/;"	f	signature:(SmtpSession_t *p_session)
wirte_IM_file	http_IM_parser.c	/^int wirte_IM_file(char *rs, const char *ws, unsigned long range, unsigned long len)$/;"	f	signature:(char *rs, const char *ws, unsigned long range, unsigned long len)
write_first_post	http_IM_parser.c	/^int write_first_post(char *rs, const char *ws, unsigned long range, unsigned long len)$/;"	f	signature:(char *rs, const char *ws, unsigned long range, unsigned long len)
write_outlog_lock	extractmain.c	/^pthread_mutex_t write_outlog_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v
write_part	gmime_smtp.c	/^void write_part (GMimeObject *part, struct namenode* nodelist, const char *spec)$/;"	f	signature:(GMimeObject *part, struct namenode* nodelist, const char *spec)
wyattach	webmail_parser.c	/^int wyattach(HttpSession* dlp_http,webmail_string_and_len *StoPT,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(HttpSession* dlp_http,webmail_string_and_len *StoPT,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
wyattach1	webmail_parser.c	/^int wyattach1(webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoBY,webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
wymail	webmail_parser.c	/^int wymail(webmail_string_and_len *StoMB,dlp_webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoMB,dlp_webmail_info *webmail)
wymail_my	srv_echo.c	/^int wymail_my(webmail_string_and_len *, webmail_info *);$/;"	p	file:	signature:(webmail_string_and_len *, webmail_info *)
wymail_my	srv_echo.c	/^int wymail_my(webmail_string_and_len *StoMB, webmail_info *webmail)$/;"	f	signature:(webmail_string_and_len *StoMB, webmail_info *webmail)
x2c	http_IM_parser.c	/^char x2c( const char* hex )$/;"	f	signature:( const char* hex )
